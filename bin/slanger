#!/usr/bin/env ruby -Ku

require 'optparse'
require 'bundler/setup'
require 'eventmachine'
require 'logger'
require 'securerandom'

options = {
  api_host: '0.0.0.0', api_port: '4567', websocket_host: '0.0.0.0',
  websocket_port: '8080', debug: false, redis_address: 'redis://127.0.0.1:6379/0',
  log_level: ::Logger::WARN, log_file: $stdout, audit_log_file: $stdout, api_log_file: $stdout,
  slanger_id: nil, mongo: false, mongo_host: 'localhost', mongo_port: '27017', mongo_db: 'slanger',
  metrics: false
  }

opts_app_id = nil
opts_app_key = nil
opts_secret = nil 
opts_webhook_url = nil 

OptionParser.new do |opts|
  opts.on '-h', '--help', 'Display this screen' do
    puts opts
    exit
  end

  opts.on '--pid_file PIDFILE', "File containing the PID of the slanger daemon" do |k|
    options[:pid_file] = k
  end

  opts.on '--app_id APP_ID', Integer, "Pusher application id (integer)" do |k|
    opts_app_id = k.to_int
  end

  opts.on '-k', '--app_key APP_KEY', "Pusher application key" do |k|
    opts_app_key = k
  end

  opts.on '-s', '--secret SECRET', "Pusher application secret" do |k|
    opts_secret = k
  end

  opts.on '-r', '--redis_address URL', "Address to bind to (Default: redis://127.0.0.1:6379/0)" do |h|
    options[:redis_address] = h
  end

  opts.on '--redis_master_address URL', "Address to bind to for writes and publishes" do |h|
    options[:redis_master_address] = h
  end

  opts.on '-a', '--api_host HOST', "API service address (Default: 0.0.0.0:4567)" do |p|
    options[:api_host], options[:api_port] = p.split(':')
  end

  opts.on '-w', '--websocket_host HOST', "WebSocket service address (Default: 0.0.0.0:8080)" do |p|
    options[:websocket_host], options[:websocket_port] = p.split(':')
  end

  opts.on '-i', '--require FILE', "Require a file before starting Slanger" do |p|
    options[:require] ||= []
    options[:require] << p
  end

  opts.on '-p', '--private_key_file FILE', "Private key file for SSL transport" do |p|
    options[:tls_options] ||= {}
    options[:tls_options][:private_key_file] = p
  end

  opts.on '-b', '--webhook_url URL', "Callback URL for webhooks" do |p|
    opts_webhook_url = p
  end

  opts.on '-c', '--cert_chain_file FILE', "Certificate chain file for SSL transport" do |p|
    options[:tls_options] ||= {}
    options[:tls_options][:cert_chain_file] = p
  end

  opts.on '-l', '--log-level LEVEL', "Log level (Default: warn)" do |p|
    levels =  {
      fatal: ::Logger::FATAL,
      error: ::Logger::ERROR,
      warn: ::Logger::WARN,
      info: ::Logger::INFO,
      debug: ::Logger::DEBUG
    }
    param_level = levels[p.to_sym]
    raise RuntimeError.new "Log level unknown. Accepted values are: " + levels.keys.join(', ') if param_level.nil?
    options[:log_level] = param_level
  end

  opts.on '--log-file FILE', "Log file" do |p|
    tmpfile = File.new(p, "a")
    tmpfile.sync = true
    options[:log_file] = tmpfile
  end

  opts.on '--audit-log-file FILE', "Audit log file" do |p|
    tmpfile = File.new(p, "a")
    tmpfile.sync = true
    options[:audit_log_file] = tmpfile
  end

  opts.on '--api-log-file FILE', "API log file" do |p|
    tmpfile = File.new(p, "a")
    tmpfile.sync = true
    options[:api_log_file] = tmpfile
  end

  opts.on '--id IDENTIFIER', 'Unique identified for the slanger daemon. Optional.' do |p|
    options[:slanger_id] = p
  end

  opts.on '--metrics on/off', 'Metrics flag' do |p|
    values =  {
      on: true,
      off: false
    }
    param_metrics = values[p.to_sym]
    raise RuntimeError.new "Statistics flag unknown. Accepted values are: " + values.keys.join(', ') if param_metrics.nil?
    options[:metrics] = param_metrics
  end

  opts.on '--admin-http-user USER', 'HTTP user for statistics and REST API calls' do |p|
    options[:admin_http_user] = p
  end

  opts.on '--admin-http-password PASSWORD', 'HTTP password for statistics and REST API calls' do |p|
    options[:admin_http_password] = p
  end

  opts.on '--mongo on/off', 'Use Mongodb' do |p|
    values =  {
      on: true,
      off: false
    }
    param_mongo = values[p.to_sym]
    raise RuntimeError.new "Mongo flag unknown. Accepted values are: " + values.keys.join(', ') if param_mongo.nil?
    options[:mongo] = param_mongo
  end

  opts.on '--mongo-host HOST', 'Mongodb host' do |p|
    options[:mongo_host] = p
  end

  opts.on '--mongo-port PORT', 'Mongodb port' do |p|
    options[:mongo_port] = p.to_i
  end

  opts.on '--mongo-db DB', 'Mongodb database' do |p|
    options[:mongo_db] = p
  end

  opts.on "-v", "--[no-]verbose", "Run verbosely" do |v|
    options[:debug] = v
  end
end.parse!

# Are all application parameters missing ?
if [opts_app_id, opts_app_key, opts_secret].any?{|item| not item.nil?}
  # No, some were given, verify that all are present
  %w<app_id app_key secret>.each do |parameter|
    raise RuntimeError.new "--#{parameter} is a required argument. Use your Pusher #{parameter}." unless eval "opts_" + parameter
  end
end

# If we use metrics, --id is mandatory
if options[:metrics] and options[:slanger_id].nil?
  raise RuntimeError.new "--id is mandatory when using metrics."
end

if options[:tls_options]
  [:cert_chain_file, :private_key_file].each do |param|
    raise RuntimeError.new "--#{param} does not exist at `#{options[:tls_options][param]}`" unless File.exists? options[:tls_options][param]
    raise RuntimeError.new "Both --cert_chain_file and --private_key_file need to be specified" unless options[:tls_options][param]
  end
end

EM.epoll
EM.kqueue

# Set up configuration
File.tap do |f|
  require f.expand_path(f.join(f.dirname(__FILE__),'..', 'lib', 'slanger', 'handler.rb'))
  require f.expand_path(f.join(f.dirname(__FILE__),'..', 'lib', 'slanger', 'config.rb'))
end
Slanger::Config.load options

unless options[:pid_file].nil?
  # Write PID to file
  pid = Process.pid.to_s
  f = File.new(options[:pid_file], 'w')
  f.write(pid)
  f.close()
end

EM.run do
  File.tap { |f| require f.expand_path(f.join(f.dirname(__FILE__),'..', 'slanger.rb')) }
  unless opts_app_id.nil?
    # Add the application that the user specified on the command line
    Fiber.new do
      Slanger::Application.create({
        app_id: opts_app_id,
        key: opts_app_key,
        secret: opts_secret,
        webhook_url: opts_webhook_url,
      })
    end.resume
  end
  Slanger::Service.run

  puts "\n"
  puts "\n"
  puts "    .d8888b.  888                                               "
  puts "   d88P  Y88b 888                                               "
  puts "   Y88b.      888                                               "
  puts '    "Y888b.   888  8888b.  88888b.   .d88b.   .d88b.  888d888   '
  puts '       "Y88b. 888     "88b 888 "88b d88P"88b d8P  Y8b 888P"     '
  puts '         "888 888 .d888888 888  888 888  888 88888888 888       '
  puts "   Y88b  d88P 888 888  888 888  888 Y88b 888 Y8b.     888       "
  puts '    "Y8888P"  888 "Y888888 888  888  "Y88888  "Y8888  888       '
  puts "                                         888                    "
  puts "                                    Y8b d88P                    "
  puts '                                    "Y88P"                      '
  puts "\n" * 2

  puts "Slanger API server listening on port #{options[:api_port]}"
  puts "Slanger WebSocket server listening on port #{options[:websocket_port]}"
end
